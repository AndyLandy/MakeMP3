#!/usr/bin/perl
use strict;
use warnings;

sub print_err;
sub print_warn;
sub print_info;

our ($ART_X, $ART_Y, $ART_TOL) = (
	600 ,
	600 ,
	0.05,
);
our $ART_PX = $ART_X*$ART_Y;

foreach my $cuesheet (@ARGV) {
	&lint_cuesheet($cuesheet);
}

exit 0;

########################################################################################################################

sub lint_cuesheet {
	my ($cuesheet) = @_;

	die unless -e $cuesheet;
	die if -d $cuesheet;

	open my $handle, '<', $cuesheet or die "'$cuesheet': cannot open\n";

	my ($dateCount, $artCount, $fileCount, $perfCount, $titlCount, $curaCount) = (0, 0, 0, 0, 0, 0);

	while (my $line = <$handle>) {
		chomp $line;

		if ($line =~ /^\s*REM\s*SKIP\s*TRUE\s*$/) {
			print_info $cuesheet, 'skipping';
		}

		$cuesheet =~ /^(?:\.\/)?(.*(?<!\\)\/).*?$/;
		my $cueDir = $1;

		my ($date, $art, $file, $perf, $title, $curated) = (
			&line_date   ($line),
			&line_artwork($line),
			&line_file   ($line),
			&line_perf   ($line),
			&line_title  ($line),
			&line_curated($line));

		++$dateCount if defined $date;
		if (defined $art) {
			++$artCount;
			my $i = info_artwork($cueDir.$art);

			print_err  $cuesheet, 'can\'t get artwork dimensions' unless defined $i and defined $i->{x} and defined $i->{y};
			print_warn $cuesheet, 'bad artwork area'       unless &margin($i->{x} * $i->{y}, $ART_PX) < $ART_TOL;
			print_warn $cuesheet, 'bad artwork width'      unless &margin($i->{x}, $ART_X) < $ART_TOL;
			print_warn $cuesheet, 'bad artwork height'     unless &margin($i->{y}, $ART_Y) < $ART_TOL;
		}
		++$fileCount if defined $file;
		++$perfCount if defined $perf;
		++$titlCount if defined $title;
		++$curaCount if defined $curated;

		foreach my $dep (grep { defined $_ } ($art, $file)) {
			my $depPath = "$cueDir$dep";
			print_err $cuesheet, "missing dependency: $depPath" unless -e $depPath;
		}
	}

	print_err  $cuesheet, 'missing REM DATE'     unless $dateCount>=1;
	print_err  $cuesheet, 'missing FILE'         unless $fileCount>=1;
	print_warn $cuesheet, 'missing REM ARTWORK'  unless $artCount >=1;
	print_warn $cuesheet, 'multiple REM ARTWORK' unless $artCount <=1;
	print_warn $cuesheet, 'missing PERFORMER'    unless $perfCount>=1;
	print_warn $cuesheet, 'missing TITLE'        unless $titlCount>=1;
	print_warn $cuesheet, 'missing REM CURATED'  unless $curaCount>=1;
}

sub line_date {
	return undef unless $_[0] =~ /^\s*REM\s+DATE\s+("(.*)"\s*|(.*))$/;
	return $1;
}

sub line_file {
	return undef unless $_[0] =~ /^\s*FILE\s+"(.*)"\s+WAVE\s*$/;
	return $1;
}

sub line_artwork {
	return undef unless $_[0] =~ /^\s*REM\s+ARTWORK\s+"(.*)"\s*$/;
	return $1;
}

sub line_perf {
	return undef unless $_[0] =~ /^\s*PERFORMER\s+"(.*)"\s*$/;
	return $1;
}

sub line_title {
	return undef unless $_[0] =~ /^\s*TITLE\s+"(.*)"\s*$/;
	return $1;
}

sub line_curated {
	return undef unless $_[0] =~ /^\s*REM\s+CURATED\s+(?:"(.*)"\s*|.*)$/;
	return $1;
}

sub info_artwork {
	my ($path) = @_;

	return undef unless `file "$path"` =~ /:.*?,\s*(\d+)x(\d+),/;

	my %dims = (x => $1, y => $2);
	return undef unless defined $dims{x} and defined $dims{y};

	return \%dims;
}

sub margin {
	my ($val, $ref) = @_;
	return abs($val/$ref - 1);
}

sub print_err {
	my ($cuesheet, $msg) = @_;
	print STDERR "ERROR $cuesheet: $msg\n";
}

sub print_warn {
	my ($cuesheet, $msg) = @_;
	print STDERR "$cuesheet: $msg\n";
}

sub print_info {
	my ($cuesheet, $msg) = @_;
	print STDERR "$cuesheet: $msg\n";
}
