#!/usr/bin/perl
use strict;
use warnings;

sub print_err;
sub print_warn;
sub print_info;

our ($AN_X, $AX_X, $AN_Y, $AX_Y, $AN_A, $AX_A, $AN_B, $AX_B) = (
	200,
	2400,
	200,
	2400,
	40000,
	5760000,
	4*1024,
	1024*1024,
);

foreach my $cuesheet (@ARGV) {
	&lint_cuesheet($cuesheet);
}

exit 0;

########################################################################################################################

sub lint_cuesheet {
	my ($cuesheet) = @_;

	die unless -e $cuesheet;
	die if -d $cuesheet;

	open my $handle, '<', $cuesheet or die "'$cuesheet': cannot open\n";

	my ($dateCount, $artCount, $fileCount, $perfCount, $titlCount, $curaCount) = (0, 0, 0, 0, 0, 0);

	while (my $line = <$handle>) {
		chomp $line;

		if ($line =~ /^\s*REM\s*SKIP\s*TRUE\s*$/) {
#			print_info $cuesheet, 'skipping';
			return;
		}

		$cuesheet =~ /^(?:\.\/)?(.*(?<!\\)\/).*?$/;
		my $cueDir = $1;

		my ($date, $art, $file, $perf, $title, $curated) = (
			&line_date   ($line),
			&line_art    ($line),
			&line_audio  ($line),
			&line_perf   ($line),
			&line_title  ($line),
			&line_curated($line));

		if (defined $art) {
			++$artCount;
			&check_art($cuesheet, $cueDir.$art);
		}

		if (defined $file) {
			++$fileCount;
			&check_audio($cuesheet, $cueDir.$file);
		}

		++$dateCount if defined $date;
		++$perfCount if defined $perf;
		++$titlCount if defined $title;
		++$curaCount if defined $curated;
	}

	# Warn on disc Y of X where Y>X
	print_err  $cuesheet, 'no DATE tag'             unless $dateCount>=1;
	print_err  $cuesheet, 'no FILE directives'      unless $fileCount>=1;
	print_warn $cuesheet, 'no ARTWORK tag'          unless $artCount >=1;
	print_warn $cuesheet, 'multiple ARTWORK tags'   unless $artCount <=1;
	print_warn $cuesheet, 'no PERFORMER directives' unless $perfCount>=1;
	print_warn $cuesheet, 'no TITLE directives'     unless $titlCount>=1;
#	print_warn $cuesheet, 'no CURATED tag'          unless $curaCount>=1;
	print_warn $cuesheet, 'multiple CURATED tags'   unless $curaCount<=1;
}

sub line_date {
	return undef unless $_[0] =~ /^\s*REM\s+DATE\s+("(.*)"\s*|(.*))$/;
	return $1;
}

sub line_audio {
	return undef unless $_[0] =~ /^\s*FILE\s+"(.*)"\s+WAVE\s*$/;
	return $1;
}

sub line_art {
	return undef unless $_[0] =~ /^\s*REM\s+ARTWORK\s+"(.*)"\s*$/;
	return $1;
}

sub line_perf {
	return undef unless $_[0] =~ /^\s*PERFORMER\s+"(.*)"\s*$/;
	return $1;
}

sub line_title {
	return undef unless $_[0] =~ /^\s*TITLE\s+"(.*)"\s*$/;
	return $1;
}

sub line_curated {
	return undef unless $_[0] =~ /^\s*REM\s+CURATED\s+(?:"(.*)"\s*|.*)$/;
	return $1;
}

sub check_file {
	my ($cuesheet, $file, $label) = @_;

	unless (-e $file) {
		print_err $file, "missing $label";
		return 0;
	}

	unless (-f $file or -l $file) {
		print_err $file, "non-file $label";
		return 0;
	}

	unless (-s $file) {
		print_err $file, "empty $label";
		return 0;
	}

	unless (-r $file) {
		print_err $file, "non-readable $label";
		return 0;
	}

	unless (-B $file) {
		print_err $file, "non-binary $label";
		return 0;
	}

	return 1;
}

sub check_art {
	my ($cuesheet, $art) = @_;

	return unless &check_file($cuesheet, $art, 'art file');

	my $i = &info_art($art);
	unless (defined $i) {
		print_err  $cuesheet, 'can\'t get art dimensions' unless defined $i;
		return undef;
	}

	print_warn $art, "art area < $AN_A"          if $i->{a} < $AN_A;
	print_warn $art, "art area > $AX_A"          if $i->{a} > $AX_A;
	print_warn $art, "art width  < $AN_X"        if $i->{x} < $AN_X;
	print_warn $art, "art width  > $AX_X"        if $i->{x} > $AX_X;
	print_warn $art, "art height < $AN_Y"        if $i->{y} < $AN_Y;
	print_warn $art, "art height > $AX_Y"        if $i->{y} > $AX_Y;
	print_warn $art, "art bytes < $AN_B"         if $i->{b} < $AN_B;
	print_warn $art, "art bytes > $AX_B"         if $i->{b} > $AX_B;
}

sub check_audio {
	my ($cuesheet, $audio) = @_;

	return unless &check_file($cuesheet, $audio, 'audio file');

	# TODO check min/max file duration?
}

sub info_art {
	my ($path) = @_;

	return undef unless `file "$path"` =~ /:.*?,\s*(\d+)x(\d+),/ and defined $1 and defined $2;

	return {
		x => $1,
		y => $2,
		a  =>  $1 * $2,
		b => -s $path,
	};
}

sub margin {
	my ($val, $ref) = @_;
	return abs($val/$ref - 1);
}

sub print_err {
	my ($cuesheet, $msg) = @_;
	print STDERR "ERROR $cuesheet: $msg\n";
}

sub print_warn {
	my ($cuesheet, $msg) = @_;
	print STDERR "$cuesheet: $msg\n";
}

sub print_info {
	my ($cuesheet, $msg) = @_;
	print STDERR "$cuesheet: $msg\n";
}
